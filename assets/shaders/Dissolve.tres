[gd_resource type="ShaderMaterial" load_steps=15 format=2]

[ext_resource path="res://assets/shaders/Noise.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 9

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=11]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeColorConstant" id=12]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeColorOp" id=13]

[sub_resource type="VisualShaderNodeVectorOp" id=14]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 2

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 9

[sub_resource type="VisualShader" id=1]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out3p0.xy);
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, n_out5p0.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// ScalarOp:7
	float n_in7p1 = 0.50000;
	float n_out7p0 = step(dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333)), n_in7p1);

// ScalarOp:12
	float n_in12p0 = 0.00000;
	float n_in12p1 = 0.05000;
	float n_out12p0 = n_in12p0 - n_in12p1;

// ScalarOp:11
	float n_out11p0 = step(dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333)), n_out12p0);

// ScalarOp:13
	float n_out13p0 = n_out7p0 - n_out11p0;

// Color:15
	vec3 n_out15p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out15p1 = 1.000000;

// VectorOp:17
	vec3 n_out17p0 = vec3(n_out13p0) * n_out15p0;

// ColorOp:16
	vec3 n_out16p0 = vec3(1.0) - (vec3(1.0) - n_out2p0) * (vec3(1.0) - n_out17p0);

// ScalarOp:6
	float n_out6p0 = n_out2p1 * n_out7p0;

// Output:0
	COLOR.rgb = n_out16p0;
	COLOR.a = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -635.805, 169.593 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1060, 80 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( 40, 80 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -160, 120 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 40, 240 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( -160, 400 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( 480, 200 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( 300, 280 )
nodes/fragment/11/node = SubResource( 9 )
nodes/fragment/11/position = Vector2( 520, 500 )
nodes/fragment/12/node = SubResource( 10 )
nodes/fragment/12/position = Vector2( 300, 560 )
nodes/fragment/13/node = SubResource( 11 )
nodes/fragment/13/position = Vector2( 800, 360 )
nodes/fragment/15/node = SubResource( 12 )
nodes/fragment/15/position = Vector2( 880, 660 )
nodes/fragment/16/node = SubResource( 13 )
nodes/fragment/16/position = Vector2( 760, 100 )
nodes/fragment/17/node = SubResource( 14 )
nodes/fragment/17/position = Vector2( 1020, 360 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 5, 0, 4, 0, 2, 1, 6, 0, 6, 0, 0, 1, 7, 0, 6, 1, 4, 0, 7, 0, 12, 0, 11, 1, 4, 0, 11, 0, 11, 0, 13, 1, 2, 0, 16, 0, 7, 0, 13, 0, 13, 0, 17, 0, 15, 0, 17, 1, 17, 0, 16, 1, 16, 0, 0, 0 )

[resource]
shader = SubResource( 1 )
